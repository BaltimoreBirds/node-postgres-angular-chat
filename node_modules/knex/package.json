{
  "name": "knex",
  "version": "0.8.6",
  "description": "A batteries-included SQL query & schema builder for Postgres, MySQL and SQLite3 and the Browser",
  "main": "knex.js",
  "dependencies": {
    "bluebird": "^2.9.24",
    "chalk": "^1.0.0",
    "commander": "^2.2.0",
    "debug": "^2.1.3",
    "inherits": "~2.0.1",
    "interpret": "^0.5.2",
    "liftoff": "~2.0.0",
    "lodash": "^3.7.0",
    "minimist": "~1.1.0",
    "mkdirp": "^0.5.0",
    "pool2": "^1.1.0",
    "readable-stream": "^1.1.12",
    "tildify": "~1.0.0",
    "v8flags": "^2.0.2"
  },
  "devDependencies": {
    "JSONStream": "^1.0.3",
    "async": "^0.9.0",
    "babel": "^5.2.17",
    "chai": "^2.3.0",
    "coveralls": "~2.11.1",
    "istanbul": "~0.3.0",
    "jshint": "^2.7.0",
    "mariasql": "^0.1.21",
    "mocha": "^2.2.4",
    "mysql": "^2.6.2",
    "mysql2": "^0.15.5",
    "node-uuid": "~1.4.0",
    "pg": "^4.3.0",
    "pg-query-stream": "^0.7.0",
    "rimraf": "2.x",
    "sinon": "^1.10.0",
    "sinon-chai": "^2.5.0",
    "sqlite3": "^3.0.5",
    "tape": "^4.0.0",
    "through": "^2.3.4"
  },
  "scripts": {
    "dev": "babel -L -D -w src/ --out-dir lib/",
    "build": "./scripts/build.sh",
    "tape": "node test/tape/index.js",
    "test": "npm run jshint && istanbul --config=test/.istanbul.yml cover _mocha -- --check-leaks -t 5000 -b -R spec test/index.js && npm run tape",
    "plaintest": "mocha --check-leaks -t 10000 -b -R spec test/index.js && npm run tape",
    "coveralls": "cat ./test/coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "jshint": "jshint --exclude=test/coverage/. test/. src/."
  },
  "bin": {
    "knex": "./lib/bin/cli.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tgriesser/knex.git"
  },
  "keywords": [
    "sql",
    "query",
    "postgresql",
    "mysql",
    "mariadb",
    "sqlite3",
    "oracle"
  ],
  "author": {
    "name": "Tim Griesser",
    "url": "https://github.com/tgriesser"
  },
  "browser": {
    "bluebird/js/main/promise": "./lib/util/bluebird.js",
    "./lib/migrate/index.js": "./lib/util/noop.js",
    "./lib/bin/cli.js": "./lib/util/noop.js",
    "./lib/seed/index.js": "./lib/util/noop.js",
    "pool2": "./lib/util/noop.js",
    "mysql": false,
    "mysql2": false,
    "mariasql": false,
    "pg": false,
    "pg-query-stream": false,
    "oracle": false,
    "strong-oracle": false,
    "sqlite3": false
  },
  "files": [
    "README.md",
    "src/*",
    "lib/*",
    "build/*",
    "knex.js",
    "LICENSE"
  ],
  "license": "MIT",
  "readme": "# [knex.js](http://knexjs.org) [![Build Status](https://travis-ci.org/tgriesser/knex.svg?branch=master)](https://travis-ci.org/tgriesser/knex) [![Coverage Status](https://coveralls.io/repos/tgriesser/knex/badge.svg?branch=master)](https://coveralls.io/r/tgriesser/knex?branch=master)\n\nGitter chat\n[![Gitter chat](https://badges.gitter.im/tgriesser/knex.svg)](https://gitter.im/tgriesser/knex \"Gitter chat\")\n\nA SQL query builder that is flexible, portable, and fun to use!\n\nA batteries-included, multi-dialect (MySQL, PostgreSQL, SQLite3, WebSQL, Oracle) query builder for\nNode.js and the Browser, featuring:\n\n- [transactions](http://knexjs.org/#Transactions)\n- [connection pooling](http://knexjs.org/#Installation-pooling)\n- [streaming queries](http://knexjs.org/#Interfaces-Streams)\n- both a [promise](http://knexjs.org/#Interfaces-Promises) and [callback](http://knexjs.org/#Interfaces-Callbacks) API\n- a [thorough test suite](https://travis-ci.org/tgriesser/knex)\n- the ability to [run in the Browser](http://knexjs.org/#Installation-browser)\n\n[Read the full documentation to get started!](http://knexjs.org)\n\nFor support and questions, join the #bookshelf channel on freenode IRC\n\nFor an Object Relational Mapper, see: http://bookshelfjs.org\n\n## Examples\n\nWe have several examples [on the website](http://knexjs.org). Here is the first one to get you started:\n\n```js\nvar knex = require('knex')({\n  dialect: 'sqlite3',\n  connection: {\n    filename: './data.db'\n  }\n});\n\n// Create a table\nknex.schema.createTable('users', function(table) {\n  table.increments('id');\n  table.string('user_name');\n})\n\n// ...and another\n.createTable('accounts', function(table) {\n  table.increments('id');\n  table.string('account_name');\n  table.integer('user_id').unsigned().references('users.id');\n})\n\n// Then query the table...\n.then(function() {\n  return knex.insert({user_name: 'Tim'}).into('users');\n})\n\n// ...and using the insert id, insert into the other table.\n.then(function(rows) {\n  return knex.table('accounts').insert({account_name: 'knex', user_id: rows[0]});\n})\n\n// Query both of the rows.\n.then(function() {\n  return knex('users')\n    .join('accounts', 'users.id', 'accounts.user_id')\n    .select('users.user_name as user', 'accounts.account_name as account');\n})\n\n// .map over the results\n.map(function(row) {\n  console.log(row);\n})\n\n// Finally, add a .catch handler for the promise chain\n.catch(function(e) {\n  console.error(e);\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tgriesser/knex/issues"
  },
  "homepage": "https://github.com/tgriesser/knex",
  "_id": "knex@0.8.6",
  "dist": {
    "shasum": "1016f957741eaff2480db63652efb706b6ed9b98"
  },
  "_from": "knex@",
  "_resolved": "https://registry.npmjs.org/knex/-/knex-0.8.6.tgz"
}
